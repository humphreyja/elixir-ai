// Sets up a element and its child elements with the flexbox properties needed
// to have the given number of columns with an optional gutter value.
@mixin has-columns($columns: 0, $gutter: 0, $column-class: "auto", $mobile: "auto", $grow: true) {
  @include align-content(stretch);
  @include align-items(stretch);
  @include display(flex);
  @include flex-direction(row);
  @include flex-wrap(nowrap);
  @include justify-content(flex-start);

  $column-selector: "> *:not(script)";

  @if $column-class != "auto" {
    $column-selector: "." + $column-class;
  }

  #{$column-selector} {
    @if $grow {
      @include flex(1 1 auto);
    }

    // We only want to set the column width if more than 1 column was specified
    // and we're looking to fill the container's width.
    @if $grow and $columns > 1 {
      @if $gutter == 0 {
        // If there is no gutter, we don't need to do anything
        // other than split up the columns evenly.
        width: 100% / $columns;
      } @else if unit($gutter) == "px" or unit($gutter) == "em" {
        // If there is a fixed gutter size, we need to trick the columns into
        // being close to the right width and stretching to fill in the rest.
        width: 85% / $columns;
      } @else if unit($gutter) == "%" {
        // If the gutter size is a percentage of the width, we can use the percentage
        // to calculate the width of the columns as a percentage as well.
        width: (100% - ($gutter * ($columns - 1))) / $columns;
      }
    }

    @if $gutter > 0 {
      margin-right: $gutter;

      // Remove the right margin for the last column in a row
      &:last-child {
        margin-right: 0;
      }
    }
  }

  @if $mobile == "auto" {
    // Stack columns on mobile by default
    @media (max-width: $mobile-breakpoint) {
      @include flex-wrap(wrap);

      #{$column-selector} {
        margin-bottom: $gutter;
        margin-right: 0;
        width: 100%;

        &:last-child {
          margin-bottom: 0;
        }
      }
    }
  }
}
